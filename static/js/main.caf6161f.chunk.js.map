{"version":3,"sources":["../../src/components/DoughnutChart/DoughnutChart.tsx","../../src/hooks/useScreenSize.ts","../../src/components/LineBarChart/customStyle.js","../../src/components/LineBarChart/LineBarChart.tsx","examples/Doughnut.tsx","examples/LineBar.tsx","examples/index.tsx","types/Types.tsx","App.tsx","index.tsx","examples/docs/Doughnut.md","examples/docs/LineBar.md"],"names":["DEFAULT_COLORS","DEFAULT_OPTIONS","cutoutPercentage","responsive","legend","position","labels","usePointStyle","fontSize","padding","generateColor","color","opacity","DoughnutChart","selectedIndex","chartColors","chartOptions","dataset","highlightLevel","DEFAULT_HIGHLIGHT_LEVEL","tooltipFormatter","a","borders","useMemo","highlighted","colors","c","data","total","p","datasets","backgroundColor","hoverBorderColor","hoverBackgroundColor","borderWidth","hoverBorderWidth","l","options","tooltips","mode","callbacks","label","i","tooltipItem","isClient","window","ChartJS","ctx","this","_chart","vm","left","right","top","signX","signY","bottom","borderSkipped","barSize","Math","halfStroke","borderLeft","borderRight","borderTop","borderBottom","corners","startCorner","corner","cornerAt","width","height","x","y","radius","x_tl","x_tr","y_tl","y_tr","x_bl","x_br","y_bl","y_br","draw","chart","_stroke","format","num","Number","LineBarChart","lineChartLabel","lineChartValues","barChartLabel","barChartValues","secondaryBarChartLabel","secondaryBarChartValues","xLabel","formattedXLabels","getSize","useCallback","useState","screenSize","setScreenSize","useEffect","handleResize","useScreenSize","type","fill","borderColor","strokeWidth","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","barThickness","aspectRatio","elements","line","scales","xAxes","display","gridLines","scaleLabel","labelString","ticks","beginAtZero","callback","yAxes","id","show","title","plugins","beforeDraw","e","Doughnut","setSelectedIndex","className","value","onChange","target","map","v","key","DoughnutExample","LineBar","slice","random","length","LineBarChartExample","Examples","doughnutExampleReadme","setDoughnutExampleReadme","lineBarChartExampleReadme","setLineBarChartExampleReadme","fetch","doughnutExampleMd","then","response","text","lineBarChartExampleMd","name","htmlFor","source","Types","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.caf6161f.chunk.js","sourcesContent":["import { ChartOptions, ChartTooltipOptions } from 'chart.js';\nimport React, { useMemo } from 'react'\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartRGBColor, DoughnutChartOptions } from '../../types';\n\n\ntype DoughnutChartProps = {\n  chartColors?: ChartRGBColor[];\n  chartOptions?: ChartOptions;\n  dataset: number[];\n  labels: string[];\n  highlightLevel?: number;\n  selectedIndex?: number[];\n  tooltipFormatter?: (a: number) => string\n}\n\nconst DEFAULT_INITIAL_BORDER = 2\nconst DEFAULT_HIGHLIGHT_LEVEL = 6\nconst DEFAULT_COLORS: ChartRGBColor[] = [\n  [107, 108, 139],\n  [36, 37, 46],\n  [254, 215, 1],\n  [85, 116, 158],\n  [81, 143, 125]\n]\n\nconst TRANSPARENT = 'rgba(0,0,0,0)'\n\nconst DEFAULT_OPTIONS: DoughnutChartOptions = {\n  cutoutPercentage: 50,\n  responsive: true,\n  legend: {\n    position: 'left',\n    labels: {\n      usePointStyle: true,\n      fontSize: 12,\n      padding: 10\n    }\n  },\n}\n\nconst generateColor = (color: ChartRGBColor, opacity = 1) => {\n  return `rgba(${[...color, opacity].join(', ')})`\n}\n\nexport const DoughnutChart = ({ selectedIndex = [], chartColors = DEFAULT_COLORS, chartOptions = DEFAULT_OPTIONS, dataset = [], labels = [], highlightLevel = DEFAULT_HIGHLIGHT_LEVEL, tooltipFormatter = a => a.toString() }: DoughnutChartProps) => {\n\n  const borders = useMemo(() => {\n    const highlighted = DEFAULT_INITIAL_BORDER + highlightLevel\n    return labels.slice(0, 4).map((_, i) => selectedIndex.includes(i) || !selectedIndex.length ? DEFAULT_INITIAL_BORDER : highlighted)\n  }, [selectedIndex, labels])\n\n  const colors = useMemo(() => {\n    return chartColors.map((c, i) => selectedIndex.includes(i) || !selectedIndex.length ? generateColor(c) : generateColor(c, 0.4))\n\n  }, [selectedIndex])\n\n\n  const data = useMemo(() => {\n    const total = dataset.reduce((p, c) => p + c, 0)\n\n    return {\n      datasets: [{\n        data: dataset,\n        backgroundColor: colors,\n        hoverBorderColor: [\n          TRANSPARENT,\n          TRANSPARENT,\n          TRANSPARENT\n        ],\n        hoverBackgroundColor: colors,\n        borderWidth: borders,\n        hoverBorderWidth: [0, 0, 0]\n      }],\n      labels: labels.map((l, i) => {\n        return `${l} (${(dataset[i] / total * 100).toFixed()}%)`\n      })\n    }\n  }, [dataset, labels, colors])\n\n  const options = useMemo(() => {\n    return {\n      ...DEFAULT_OPTIONS,\n      tooltips: {\n        mode: 'label',\n        callbacks: {\n          label: function (tooltipItem: any, data: any) {\n            const i = tooltipItem.index;\n            return data.labels[i] + ': ' + tooltipFormatter(data.datasets[0].data[i]);\n          }\n        }\n      } as ChartTooltipOptions,\n      ...chartOptions\n    }\n  }, [chartOptions])\n\n  return (\n    <Doughnut data={data} options={options} />\n  )\n}\n","import { useCallback, useEffect, useState } from 'react';\n\ninterface UseScreenSize {\n  width: number | null;\n  height: number | null;\n}\n\nconst isClient = typeof window === 'object';\n\nexport const useScreenSize = (): UseScreenSize => {\n  const getSize: () => UseScreenSize = useCallback(() => {\n    return {\n      width: isClient ? window.innerWidth : null,\n      height: isClient ? window.innerHeight : null,\n    };\n  }, []);\n\n  const [screenSize, setScreenSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return;\n    }\n\n    const handleResize = (): void => {\n      setScreenSize(getSize());\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [setScreenSize, getSize]);\n\n  return screenSize;\n};\n","//Custom rewrite for radius border on bar draw\n//Code from https://github.com/jedtrow/Chart.js-Rounded-Bar-Charts with a few adjustments\n\nimport { Chart as ChartJS } from 'react-chartjs-2'\n\nChartJS.elements.Rectangle.prototype.draw = function () {\n  const ctx = this._chart.ctx\n  const vm = this._view\n  let left, right, top, bottom, signX, signY, borderSkipped\n  let borderWidth = vm.borderWidth\n\n  // If radius is less than 0 or is large enough to cause drawing errors a max\n  // radius is imposed. If cornerRadius is not defined set it to 0.\n  let cornerRadius = this._chart.config.options.cornerRadius\n  if (cornerRadius < 0) { cornerRadius = 0 }\n  if (typeof cornerRadius == 'undefined') { cornerRadius = 0 }\n\n  if (!vm.horizontal) {\n    left = vm.x - vm.width / 2\n    right = vm.x + vm.width / 2\n    top = vm.y\n    bottom = vm.base\n    signX = 1\n    signY = bottom > top ? 1 : -1\n    borderSkipped = vm.borderSkipped || 'bottom'\n  }\n\n  // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    const barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom))\n    borderWidth = borderWidth > barSize ? barSize : borderWidth\n    const halfStroke = borderWidth / 2\n    // Adjust borderWidth when bar top position is near vm.base(zero).\n    const borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0)\n    const borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0)\n    const borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0)\n    const borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0)\n    // not become a vertical line?\n    if (borderLeft !== borderRight) {\n      top = borderTop\n      bottom = borderBottom\n    }\n    // not become a horizontal line?\n    if (borderTop !== borderBottom) {\n      left = borderLeft\n      right = borderRight\n    }\n  }\n\n  ctx.beginPath()\n  ctx.fillStyle = vm.backgroundColor\n  ctx.strokeStyle = vm.borderColor\n  ctx.lineWidth = borderWidth\n\n  // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n  const corners = [\n    [left, bottom],\n    [left, top],\n    [right, top],\n    [right, bottom],\n  ]\n\n  // Find first (starting) corner with fallback to 'bottom'\n  const borders = ['bottom', 'left', 'top', 'right']\n  let startCorner = borders.indexOf(borderSkipped, 0)\n  if (startCorner === -1) {\n    startCorner = 0\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4]\n  }\n\n  // Draw rectangle from 'startCorner'\n  let corner = cornerAt(0)\n  ctx.moveTo(corner[0], corner[1])\n\n  for (let i = 1; i < 4; i++) {\n    corner = cornerAt(i)\n    let nextCornerId = i + 1\n    if (nextCornerId == 4) {\n      nextCornerId = 0\n    }\n\n    const width = corners[2][0] - corners[1][0]\n    const height = corners[0][1] - corners[1][1]\n    const x = corners[1][0]\n    const y = corners[1][1]\n\n    let radius = 30\n\n    // Fix radius being too large\n    if (radius > Math.abs(height) / 1.5) {\n      radius = Math.floor(Math.abs(height) / 1.5)\n    }\n    if (radius > Math.abs(width) / 1.5) {\n      radius = Math.floor(Math.abs(width) / 1.5)\n    }\n\n    if (height < 0) {\n      // Negative values in a standard bar chart\n      const x_tl = x; const x_tr = x + width\n      const y_tl = y + height; const y_tr = y + height\n\n      const x_bl = x; const x_br = x + width\n      const y_bl = y; const y_br = y\n\n      // Draw\n      ctx.moveTo(x_bl + radius, y_bl)\n      ctx.lineTo(x_br - radius, y_br)\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius)\n      ctx.lineTo(x_tr, y_tr + radius)\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr)\n      ctx.lineTo(x_tl + radius, y_tl)\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius)\n      ctx.lineTo(x_bl, y_bl - radius)\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl)\n    } else {\n      ctx.moveTo(x + radius, y)\n      ctx.lineTo(x + width - radius, y)\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n      ctx.lineTo(x + width, y + height - radius)\n      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height)\n      ctx.lineTo(x + radius, y + height)\n      ctx.quadraticCurveTo(x, y + height, x, y + height)\n      ctx.lineTo(x, y + radius)\n      ctx.quadraticCurveTo(x, y, x + radius, y)\n    }\n  }\n\n  ctx.fill()\n  if (borderWidth) {\n    ctx.stroke()\n  }\n}\n\nlet draw = ChartJS.controllers.line.prototype.draw;\nChartJS.controllers.line = ChartJS.controllers.line.extend({\n  draw: function () {\n    draw.apply(this, arguments);\n    let ctx = this.chart.chart.ctx;\n    let _stroke = ctx.stroke;\n    ctx.stroke = function () {\n      ctx.save();\n      ctx.shadowColor = 'rgba(255,220,68, 0.8)';\n      ctx.shadowBlur = 10;\n      ctx.shadowOffsetX = 0;\n      ctx.shadowOffsetY = 11;\n      _stroke.apply(this, arguments)\n      ctx.restore();\n    }\n  }\n});\n","import { ChartOptions, ChartTooltipOptions } from 'chart.js'\nimport React, { useMemo } from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport { useScreenSize } from '../../hooks/useScreenSize'\nimport './customStyle'\n\ntype LineBarChartProps = {\n  lineChartValues: number[];\n  barChartValues: number[];\n  barChartLabel: string;\n  lineChartLabel: string;\n  labels: number[] | string[],\n  chartOptions?: ChartOptions,\n  secondaryBarChartValues?: number[];\n  secondaryBarChartLabel?: string;\n  tooltipFormatter?: (n: number) => string\n  xLabel?: string,\n  formattedXLabels?: string[]\n}\n\nconst format = (num: any) => Math.round((num + Number.EPSILON) * 100) / 100\n\nexport const LineBarChart = ({ lineChartLabel, lineChartValues, labels, barChartLabel, barChartValues, chartOptions = {}, tooltipFormatter = a => a.toString(), secondaryBarChartLabel, secondaryBarChartValues, xLabel, formattedXLabels = [] }: LineBarChartProps) => {\n  const { width } = useScreenSize()\n  const data = useMemo(() => {\n    return {\n      datasets: [\n        {\n          label: lineChartLabel,\n          type: 'line',\n          data: lineChartValues,\n          fill: false,\n          borderColor: 'rgba(255,214,13, 1)',\n          strokeWidth: '3px',\n          pointBorderColor: 'transparent',\n          pointBackgroundColor: 'transparent',\n          pointHoverBackgroundColor: 'rgba(255,214,13, 1)',\n          pointHoverBorderColor: 'rgba(255,214,13, 1)',\n          borderWidth: 4,\n          yAxisID: 'y-axis-2',\n        },\n        {\n          type: 'bar',\n          label: barChartLabel,\n          data: barChartValues,\n          fill: false,\n          backgroundColor: '#000000',\n          borderColor: '#1e1e1e',\n          hoverBackgroundColor: '#1e1e1e',\n          hoverBorderColor: '#1e1e1e',\n          yAxisID: 'y-axis-1',\n          barThickness: (width || 0) > 500 ? 12 : 6,\n        },\n        ...(secondaryBarChartValues?.length ? [\n          {\n            type: 'bar',\n            label: secondaryBarChartLabel,\n            data: secondaryBarChartValues,\n            fill: false,\n            backgroundColor: '#55749e',\n            borderColor: '#55749e',\n            hoverBackgroundColor: '#55749e',\n            hoverBorderColor: '#55749e',\n            yAxisID: 'y-axis-1',\n            barThickness: (width || 0) > 500 ? 12 : 6,\n          }] :\n          []\n        )\n      ]\n    }\n  }, [lineChartLabel, lineChartValues, barChartLabel, barChartValues])\n\n  const options: ChartOptions = useMemo(() => {\n    return {\n      ...{\n        aspectRatio: (width || 0) > 500 ? 3 : 1.5,\n        responsive: true,\n        labels: labels,\n        legend: {\n          labels: {\n            usePointStyle: true,\n          },\n        },\n        tooltips: {\n          mode: 'index',\n        },\n        elements: {\n          line: {\n            fill: false\n          }\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              labels: labels,\n              scaleLabel: {\n                display: true,\n                labelString: xLabel || ''\n              },\n              ticks: {\n                beginAtZero: false,\n                callback: function (value: any) {\n                  // @ts-ignore\n                  return formattedXLabels[labels.indexOf(value)] || value\n                },\n              }\n            }\n          ],\n          yAxes: [\n            {\n              type: 'linear',\n              display: true,\n              position: 'left',\n              scaleLabel: {\n                display: true,\n                labelString: `${barChartLabel} ${secondaryBarChartValues?.length ? ` / ${secondaryBarChartLabel}` : ''}`\n              },\n              id: 'y-axis-1',\n              gridLines: {\n                display: false\n              },\n              labels: {\n                show: true\n              },\n              ticks: {\n                beginAtZero: false,\n                callback: function (value: any) {\n                  return tooltipFormatter(format(value));\n                },\n              }\n            },\n            {\n              type: 'linear',\n              display: true,\n              position: 'right',\n              id: 'y-axis-2',\n              scaleLabel: {\n                display: true,\n                labelString: lineChartLabel\n              },\n              gridLines: {\n                display: false\n              },\n              labels: {\n                show: true\n              },\n              ticks: {\n                beginAtZero: true,\n                callback: function (value: any) {\n                  return '$' + tooltipFormatter(format(value));\n                },\n              }\n            },\n          ]\n        }\n      },\n      tooltips: {\n        mode: 'label',\n        callbacks: {\n          label: function (tooltipItem: any, data: any) {\n            const i = tooltipItem.datasetIndex;\n            return data.datasets[i].label + ': ' + tooltipFormatter(format(+tooltipItem.value)) + (i !== 1 ? '$' : '');\n          },\n          title: function (tooltipItem: any) {\n            return formattedXLabels[tooltipItem[0].index] || tooltipItem[0].label\n          }\n        }\n      } as ChartTooltipOptions,\n      ...chartOptions\n    } as ChartOptions;\n  }, [width])\n\n  const plugins = useMemo(() => [\n    {\n      beforeDraw: function (c: any) {\n        c.legend.legendItems.forEach(function (e: any, i: number) {\n          if (i === 0) {\n            e.fillStyle = 'rgba(255,214,13, 1)'\n          }\n        });\n      }\n    }\n  ], [])\n\n\n  return (\n    // @ts-ignore\n    <Bar data={data} options={options} height={null} width={null} plugins={plugins} />\n  )\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport { DoughnutChart } from 'aesthetic-charts'\n\n\nconst Doughnut = () => {\n  const [selectedIndex, setSelectedIndex] = useState<number[]>([])\n\n  const data = [50, 100, 75, 2, 89]\n  const labels = ['Mobile', 'Tablet', 'Desktop', 'Test', 'Kita']\n\n  const chartOptions = {\n    legend: {\n      labels: {\n        fontSize: 16,\n        usePointStyle: true,\n        padding: 10\n      },\n      position: 'left' as 'left'\n    }\n  }\n\n  const handleChange = ({ target: { value } }: ChangeEvent<HTMLSelectElement>) =>\n    setSelectedIndex(value ? [+value] : [])\n\n  return (\n    <>\n      <div className=\"row\">\n        <label>Select Device</label>\n        <select value={selectedIndex[0]} onChange={handleChange}>\n          <option>All</option>\n          {\n            [\n              'Mobile',\n              'Tablet',\n              'Desktop',\n            ].map((v, i) => <option value={i} key={i}>{v}</option>)\n          }\n        </select>\n      </div>\n      <div className=\"row\">\n        <DoughnutChart dataset={data} labels={labels} selectedIndex={selectedIndex} chartOptions={chartOptions} />\n      </div>\n    </>\n  )\n}\n\nexport const DoughnutExample = () => {\n\n  return (\n    <div className=\"example paper\">\n      <h4>Doughnut Example</h4>\n      <Doughnut />\n    </div>\n  )\n\n}","import React from 'react'\nimport { LineBarChart } from 'aesthetic-charts'\n\n\nconst LineBar = () => {\n  const labels = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].slice(5, 25)\n  const barChartValues = [200, 185, 590, 621, 250, 400, 95, 200, 185, 590, 621, 250, 400, 95, 200, 185, 590, 621, 250, 400, 95, 200, 185, 590, 621, 250, 45, 321, 34, 432].slice(5, 25)\n  const lineChartValues = [11, 59, 55, 60, 65, 70, 67, 50, 40, 49, 60, 47, 51, 65, 40, 49, 60, 70, 80, 90, 80, 78, 75, 60, 50, 65, 40, 49, 60, 47].map(a => a / 5).slice(5, 25)\n\n  return (\n    <>\n      <div className=\"row\">\n        <LineBarChart\n          barChartLabel={'Visitor'}\n          lineChartLabel={'Sales'}\n          secondaryBarChartLabel={'CPM'}\n          barChartValues={barChartValues}\n          lineChartValues={lineChartValues}\n          secondaryBarChartValues={lineChartValues.map(l => l * Math.random())}\n          labels={labels}\n          xLabel={'Days'}\n          formattedXLabels={labels.map(l => l + (l > labels[labels.length - 1] ? '/9' : '/10'))}\n        />\n      </div>\n    </>\n  )\n}\n\nexport const LineBarChartExample = () => {\n\n  return (\n    <div className=\"example paper\">\n      <h4>LineBarChart Example</h4>\n      <LineBar />\n    </div>\n  )\n\n}","import React, { useEffect, useState } from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nimport { DoughnutExample } from './Doughnut'\nimport { LineBarChartExample } from './LineBar'\n\n// @ts-ignore\nimport doughnutExampleMd from './docs/Doughnut.md'\n// @ts-ignore\nimport lineBarChartExampleMd from './docs/LineBar.md'\n\n\nexport const Examples = () => {\n  const [doughnutExampleReadme, setDoughnutExampleReadme] = useState<any>(null)\n  const [lineBarChartExampleReadme, setLineBarChartExampleReadme] = useState<any>(null)\n\n\n  useEffect(() => {\n    fetch(doughnutExampleMd).then((response) => response.text()).then((text) => {\n      setDoughnutExampleReadme(text)\n    })\n    fetch(lineBarChartExampleMd).then((response) => response.text()).then((text) => {\n      setLineBarChartExampleReadme(text)\n    })\n  }, [setLineBarChartExampleReadme, setDoughnutExampleReadme])\n\n  return <div className=\"examples\">\n    <h2>Examples</h2>\n    <div className=\"row\">\n      <div className=\"collapsible\">\n        <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible\" />\n        <label htmlFor=\"collapsible1\">DoughnutChart Example</label>\n        <div className=\"collapsible-body\">\n          <DoughnutExample />\n          <div className=\"container-sm paper\">\n            <ReactMarkdown source={doughnutExampleReadme} />\n          </div>\n        </div>\n      </div>\n      <div className=\"collapsible\">\n        <input id=\"collapsible2\" type=\"checkbox\" name=\"collapsible\" />\n        <label htmlFor=\"collapsible2\">LineBarChart Example</label>\n        <div className=\"collapsible-body\">\n          <LineBarChartExample />\n          <div className=\"container-sm paper\">\n            <ReactMarkdown source={lineBarChartExampleReadme} />\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n}","import React from 'react'\n\nexport const Types = () => {\n\n  return <div className=\"paper\">\n    <h2>Coming Soon...</h2>\n  </div>\n}","import React from 'react'\nimport { Examples } from './examples'\n\n\nimport './index.css'\nimport { Types } from './types/Types'\n\nconst App = () => {\n\n\n  return <div className=\"app paper container\">\n    <h1>Aesthetic Charts</h1>\n    <div className=\"row flex-spaces tabs\">\n      <input id=\"tab1\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab1\">Installation</label>\n\n      <input id=\"tab2\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab2\">Documentation</label>\n\n      <input id=\"tab3\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab3\">Examples</label>\n\n      <input id=\"tab4\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab4\">Roadmap</label>\n\n      <div className=\"content\" id=\"content1\">\n        <h2>Installation Notes</h2>\n      </div>\n      <div className=\"content\" id=\"content2\">\n        <h2>Documentation</h2>\n      </div>\n      <div className=\"content\" id=\"content3\">\n        <Examples />\n\n      </div>\n      <div className=\"content\" id=\"content4\">\n        <h2>Roadmap</h2>\n        <Types />\n      </div>\n    </div>\n\n  </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/Doughnut.0f582ced.md\";","module.exports = __webpack_public_path__ + \"static/media/LineBar.a0017100.md\";"],"sourceRoot":""}