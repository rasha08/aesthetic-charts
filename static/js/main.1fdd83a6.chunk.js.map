{"version":3,"sources":["../../src/components/DoughnutChart/DoughnutChart.tsx","../../src/components/LineBarChart/customStyle.js","../../src/components/LineBarChart/LineBarChart.tsx","examples/Doughnut.tsx","examples/LineBar.tsx","examples/index.tsx","types/Types.tsx","App.tsx","index.tsx","examples/docs/Doughnut.md","examples/docs/LineBar.md"],"names":["DEFAULT_COLORS","DEFAULT_OPTIONS","cutoutPercentage","responsive","legend","position","labels","usePointStyle","fontSize","padding","generateColor","color","opacity","DoughnutChart","selectedIndex","chartColors","chartOptions","dataset","highlightLevel","DEFAULT_HIGHLIGHT_LEVEL","borders","useMemo","highlighted","colors","c","data","total","p","datasets","backgroundColor","hoverBorderColor","hoverBackgroundColor","borderWidth","hoverBorderWidth","l","options","ChartJS","ctx","this","_chart","vm","console","left","right","top","signX","signY","bottom","borderSkipped","barSize","Math","halfStroke","borderLeft","borderRight","borderTop","borderBottom","corners","startCorner","corner","cornerAt","i","width","height","x","y","radius","x_tl","x_tr","y_tl","y_tr","x_bl","x_br","y_bl","y_br","draw","chart","_stroke","LineBarChart","lineChartLabel","lineChartValues","barChartLabel","barChartValues","label","type","fill","borderColor","strokeWidth","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","barThickness","tooltips","mode","elements","line","scales","xAxes","display","gridLines","yAxes","id","show","ticks","beginAtZero","callback","plugins","afterDraw","chartInstance","Doughnut","useState","setSelectedIndex","className","value","onChange","target","map","v","key","DoughnutExample","LineBar","a","LineBarChartExample","Examples","doughnutExampleReadme","setDoughnutExampleReadme","lineBarChartExampleReadme","setLineBarChartExampleReadme","useEffect","fetch","doughnutExampleMd","then","response","text","lineBarChartExampleMd","name","htmlFor","source","Types","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1fdd83a6.chunk.js","sourcesContent":["import { ChartOptions } from 'chart.js';\nimport React, { useMemo } from 'react'\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartRGBColor, DoughnutChartOptions } from '../../types';\n\n\ntype DoughnutChartProps = {\n  chartColors?: ChartRGBColor[],\n  chartOptions?: ChartOptions,\n  dataset: number[],\n  labels: string[],\n  highlightLevel?: number,\n  selectedIndex?: number[]\n}\n\nconst DEFAULT_INITIAL_BORDER = 10\nconst DEFAULT_HIGHLIGHT_LEVEL = 6\nconst DEFAULT_COLORS: ChartRGBColor[] = [\n  [107, 108, 139],\n  [36, 37, 46],\n  [254, 215, 1]\n]\n\nconst TRANSPARENT = 'rgba(0,0,0,0)'\n\nconst DEFAULT_OPTIONS: DoughnutChartOptions = {\n  cutoutPercentage: 50,\n  responsive: true,\n  legend: {\n    position: 'left',\n    labels: {\n      usePointStyle: true,\n      fontSize: 12,\n      padding: 14\n    }\n  },\n}\n\nconst generateColor = (color: ChartRGBColor, opacity = 1) => {\n  return `rgba(${[...color, opacity].join(', ')})`\n}\n\nexport const DoughnutChart = ({ selectedIndex = [], chartColors = DEFAULT_COLORS, chartOptions = DEFAULT_OPTIONS, dataset = [], labels = [], highlightLevel = DEFAULT_HIGHLIGHT_LEVEL }: DoughnutChartProps) => {\n\n  const borders = useMemo(() => {\n    const highlighted = DEFAULT_INITIAL_BORDER + highlightLevel\n    return labels.map((_, i) => selectedIndex.includes(i) || !selectedIndex.length ? DEFAULT_INITIAL_BORDER : highlighted)\n  }, [selectedIndex, labels])\n\n  const colors = useMemo(() => {\n    return chartColors.map((c, i) => selectedIndex.includes(i) || !selectedIndex.length ? generateColor(c) : generateColor(c, 0.6))\n\n  }, [selectedIndex])\n\n\n  const data = useMemo(() => {\n    const total = dataset.reduce((p, c) => p + c, 0)\n\n    return {\n      datasets: [{\n        data: dataset,\n        backgroundColor: colors,\n        hoverBorderColor: [\n          TRANSPARENT,\n          TRANSPARENT,\n          TRANSPARENT\n        ],\n        hoverBackgroundColor: colors,\n        borderWidth: borders,\n        hoverBorderWidth: [0, 0, 0]\n      }],\n      labels: labels.map((l, i) => {\n        return `${l} (${(dataset[i] / total * 100).toFixed()} %)`\n      })\n    }\n  }, [dataset, labels, colors])\n\n  const options = useMemo(() => {\n    return {\n      ...DEFAULT_OPTIONS,\n      ...chartOptions\n    }\n  }, [chartOptions])\n\n  return (\n    <Doughnut data={data} options={options} />\n  )\n}\n","//Custom rewrite for radius border on bar draw\n//Code from https://github.com/jedtrow/Chart.js-Rounded-Bar-Charts with a few adjustments\n\nimport { Chart as ChartJS } from 'react-chartjs-2'\n\nChartJS.elements.Rectangle.prototype.draw = function () {\n  const ctx = this._chart.ctx\n  const vm = this._view\n  let left, right, top, bottom, signX, signY, borderSkipped\n  let borderWidth = vm.borderWidth\n  console.log('DRAW')\n\n  // If radius is less than 0 or is large enough to cause drawing errors a max\n  // radius is imposed. If cornerRadius is not defined set it to 0.\n  let cornerRadius = this._chart.config.options.cornerRadius\n  if (cornerRadius < 0) { cornerRadius = 0 }\n  if (typeof cornerRadius == 'undefined') { cornerRadius = 0 }\n\n  if (!vm.horizontal) {\n    left = vm.x - vm.width / 2\n    right = vm.x + vm.width / 2\n    top = vm.y\n    bottom = vm.base\n    signX = 1\n    signY = bottom > top ? 1 : -1\n    borderSkipped = vm.borderSkipped || 'bottom'\n  }\n\n  // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    const barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom))\n    borderWidth = borderWidth > barSize ? barSize : borderWidth\n    const halfStroke = borderWidth / 2\n    // Adjust borderWidth when bar top position is near vm.base(zero).\n    const borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0)\n    const borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0)\n    const borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0)\n    const borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0)\n    // not become a vertical line?\n    if (borderLeft !== borderRight) {\n      top = borderTop\n      bottom = borderBottom\n    }\n    // not become a horizontal line?\n    if (borderTop !== borderBottom) {\n      left = borderLeft\n      right = borderRight\n    }\n  }\n\n  ctx.beginPath()\n  ctx.fillStyle = vm.backgroundColor\n  ctx.strokeStyle = vm.borderColor\n  ctx.lineWidth = borderWidth\n\n  // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n  const corners = [\n    [left, bottom],\n    [left, top],\n    [right, top],\n    [right, bottom],\n  ]\n\n  // Find first (starting) corner with fallback to 'bottom'\n  const borders = ['bottom', 'left', 'top', 'right']\n  let startCorner = borders.indexOf(borderSkipped, 0)\n  if (startCorner === -1) {\n    startCorner = 0\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4]\n  }\n\n  // Draw rectangle from 'startCorner'\n  let corner = cornerAt(0)\n  ctx.moveTo(corner[0], corner[1])\n\n  for (let i = 1; i < 4; i++) {\n    corner = cornerAt(i)\n    let nextCornerId = i + 1\n    if (nextCornerId == 4) {\n      nextCornerId = 0\n    }\n\n    const width = corners[2][0] - corners[1][0]\n    const height = corners[0][1] - corners[1][1]\n    const x = corners[1][0]\n    const y = corners[1][1]\n\n    let radius = 30\n\n    // Fix radius being too large\n    if (radius > Math.abs(height) / 1.5) {\n      radius = Math.floor(Math.abs(height) / 1.5)\n    }\n    if (radius > Math.abs(width) / 1.5) {\n      radius = Math.floor(Math.abs(width) / 1.5)\n    }\n\n    if (height < 0) {\n      // Negative values in a standard bar chart\n      const x_tl = x; const x_tr = x + width\n      const y_tl = y + height; const y_tr = y + height\n\n      const x_bl = x; const x_br = x + width\n      const y_bl = y; const y_br = y\n\n      // Draw\n      ctx.moveTo(x_bl + radius, y_bl)\n      ctx.lineTo(x_br - radius, y_br)\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius)\n      ctx.lineTo(x_tr, y_tr + radius)\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr)\n      ctx.lineTo(x_tl + radius, y_tl)\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius)\n      ctx.lineTo(x_bl, y_bl - radius)\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl)\n    } else {\n      ctx.moveTo(x + radius, y)\n      ctx.lineTo(x + width - radius, y)\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n      ctx.lineTo(x + width, y + height - radius)\n      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height)\n      ctx.lineTo(x + radius, y + height)\n      ctx.quadraticCurveTo(x, y + height, x, y + height)\n      ctx.lineTo(x, y + radius)\n      ctx.quadraticCurveTo(x, y, x + radius, y)\n    }\n  }\n\n  ctx.fill()\n  if (borderWidth) {\n    ctx.stroke()\n  }\n}\n\nlet draw = ChartJS.controllers.line.prototype.draw;\nChartJS.controllers.line = ChartJS.controllers.line.extend({\n  draw: function () {\n    draw.apply(this, arguments);\n    let ctx = this.chart.chart.ctx;\n    let _stroke = ctx.stroke;\n    ctx.stroke = function () {\n      ctx.save();\n      ctx.shadowColor = 'rgba(255,220,68, 0.8)';\n      ctx.shadowBlur = 10;\n      ctx.shadowOffsetX = 0;\n      ctx.shadowOffsetY = 11;\n      _stroke.apply(this, arguments)\n      ctx.restore();\n    }\n  }\n});\n","import { ChartOptions } from 'chart.js'\nimport React, { useMemo } from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport './customStyle'\n\ntype LineBarChartProps = {\n  lineChartValues: number[];\n  barChartValues: number[];\n  barChartLabel: string;\n  lineChartLabel: string;\n  labels: number[] | string[],\n  chartOptions?: ChartOptions,\n}\n\nexport const LineBarChart = ({ lineChartLabel, lineChartValues, labels, barChartLabel, barChartValues, chartOptions = {} }: LineBarChartProps) => {\n\n  const data = useMemo(() => {\n    return {\n      datasets: [\n        {\n          label: lineChartLabel,\n          type: 'line',\n          data: lineChartValues,\n          fill: false,\n          borderColor: 'rgba(255,214,13, 1)',\n          strokeWidth: '3px',\n          pointBorderColor: 'transparent',\n          pointBackgroundColor: 'transparent',\n          pointHoverBackgroundColor: '#ffd60d',\n          pointHoverBorderColor: 'transparent',\n          borderWidth: 4,\n          yAxisID: 'y-axis-2',\n        },\n        {\n          type: 'bar',\n          label: barChartLabel,\n          data: barChartValues,\n          fill: false,\n          backgroundColor: '#000000',\n          borderColor: '#1e1e1e',\n          hoverBackgroundColor: '#1e1e1e',\n          hoverBorderColor: '#1e1e1e',\n          yAxisID: 'y-axis-1',\n          barThickness: 10\n        }]\n    }\n  }, [lineChartLabel, lineChartValues, barChartLabel, barChartValues])\n\n  const options: ChartOptions = useMemo(() => {\n    return {\n      ...{\n        responsive: true,\n        labels: labels,\n        tooltips: {\n          mode: 'label'\n        },\n        elements: {\n          line: {\n            fill: false\n          }\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              labels: labels,\n            }\n          ],\n          yAxes: [\n            {\n              type: 'linear',\n              display: true,\n              position: 'left',\n              id: 'y-axis-1',\n              gridLines: {\n                display: false\n              },\n              labels: {\n                show: true\n              }\n            },\n            {\n              type: 'linear',\n              display: true,\n              position: 'right',\n              id: 'y-axis-2',\n              gridLines: {\n                display: false\n              },\n              labels: {\n                show: true\n              },\n              ticks: {\n                beginAtZero: true,\n                callback: function (value: any) {\n                  return '$' + value;\n                }\n              }\n            }\n          ]\n        }\n      },\n      ...chartOptions\n    };\n  }, [])\n\n  const plugins = useMemo(() => [{\n    afterDraw: (chartInstance: any) => {\n      const ctx = chartInstance.chart.ctx;\n      ctx.fillText(\"This text drawn by a plugin\", 100, 100);\n    }\n  }], []);\n\n  return (\n    <Bar\n      data={data}\n      options={options}\n      plugins={plugins}\n    />\n  )\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport { DoughnutChart } from 'aesthetic-charts'\n\n\nconst Doughnut = () => {\n  const [selectedIndex, setSelectedIndex] = useState<number[]>([])\n\n  const data = [50, 100, 75]\n  const labels = ['Mobile', 'Tablet', 'Desktop']\n\n  const chartOptions = {\n    legend: {\n      labels: {\n        fontSize: 16,\n        usePointStyle: true,\n        padding: 10\n      },\n      position: 'left' as 'left'\n    }\n  }\n\n  const handleChange = ({ target: { value } }: ChangeEvent<HTMLSelectElement>) =>\n    setSelectedIndex(value ? [+value] : [])\n\n  return (\n    <>\n      <div className=\"row\">\n        <label>Select Device</label>\n        <select value={selectedIndex[0]} onChange={handleChange}>\n          <option>All</option>\n          {\n            [\n              'Mobile',\n              'Tablet',\n              'Desktop',\n            ].map((v, i) => <option value={i} key={i}>{v}</option>)\n          }\n        </select>\n      </div>\n      <div className=\"row\">\n        <DoughnutChart dataset={data} labels={labels} selectedIndex={selectedIndex} chartOptions={chartOptions} />\n      </div>\n    </>\n  )\n}\n\nexport const DoughnutExample = () => {\n\n  return (\n    <div className=\"example paper\">\n      <h4>Doughnut Example</h4>\n      <Doughnut />\n    </div>\n  )\n\n}","import React from 'react'\nimport { LineBarChart } from 'aesthetic-charts'\n\n\nconst LineBar = () => {\n  const labels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  const barChartValues = [200, 185, 590, 621, 250, 400, 95, 200, 185, 590, 621, 250, 400, 95, 200, 185, 590, 621, 250, 400, 95, 200, 185, 590, 621, 250, 45, 321, 34, 432]\n  const lineChartValues = [51, 59, 55, 60, 65, 70, 67, 50, 40, 49, 60, 47, 51, 65, 40, 49, 60, 70, 80, 90, 80, 78, 75, 60, 50, 65, 40, 49, 60, 47].map(a => a / 5)\n\n  return (\n    <>\n      <div className=\"row\">\n        <LineBarChart\n          barChartLabel={'Visitor'}\n          lineChartLabel={'Sales'}\n          barChartValues={barChartValues}\n          lineChartValues={lineChartValues}\n          labels={labels}\n        />\n      </div>\n    </>\n  )\n}\n\nexport const LineBarChartExample = () => {\n\n  return (\n    <div className=\"example paper\">\n      <h4>LineBarChart Example</h4>\n      <LineBar />\n    </div>\n  )\n\n}","import React, { useEffect, useState } from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nimport { DoughnutExample } from './Doughnut'\nimport { LineBarChartExample } from './LineBar'\n\n// @ts-ignore\nimport doughnutExampleMd from './docs/Doughnut.md'\n// @ts-ignore\nimport lineBarChartExampleMd from './docs/LineBar.md'\n\n\nexport const Examples = () => {\n  const [doughnutExampleReadme, setDoughnutExampleReadme] = useState<any>(null)\n  const [lineBarChartExampleReadme, setLineBarChartExampleReadme] = useState<any>(null)\n\n\n  useEffect(() => {\n    fetch(doughnutExampleMd).then((response) => response.text()).then((text) => {\n      setDoughnutExampleReadme(text)\n    })\n    fetch(lineBarChartExampleMd).then((response) => response.text()).then((text) => {\n      setLineBarChartExampleReadme(text)\n    })\n  }, [setLineBarChartExampleReadme, setDoughnutExampleReadme])\n\n  return <div className=\"examples\">\n    <h2>Examples</h2>\n    <div className=\"row\">\n      <div className=\"collapsible\">\n        <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible\" />\n        <label htmlFor=\"collapsible1\">DoughnutChart Example</label>\n        <div className=\"collapsible-body\">\n          <DoughnutExample />\n          <div className=\"container-sm paper\">\n            <ReactMarkdown source={doughnutExampleReadme} />\n          </div>\n        </div>\n      </div>\n      <div className=\"collapsible\">\n        <input id=\"collapsible2\" type=\"checkbox\" name=\"collapsible\" />\n        <label htmlFor=\"collapsible2\">LineBarChart Example</label>\n        <div className=\"collapsible-body\">\n          <LineBarChartExample />\n          <div className=\"container-sm paper\">\n            <ReactMarkdown source={lineBarChartExampleReadme} />\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n}","import React from 'react'\n\nexport const Types = () => {\n\n  return <div className=\"paper\">\n    <h2>Coming Soon...</h2>\n  </div>\n}","import React from 'react'\nimport { Examples } from './examples'\n\n\nimport './index.css'\nimport { Types } from './types/Types'\n\nconst App = () => {\n\n\n  return <div className=\"app paper container\">\n    <h1>Aesthetic Charts</h1>\n    <div className=\"row flex-spaces tabs\">\n      <input id=\"tab1\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab1\">Installation</label>\n\n      <input id=\"tab2\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab2\">Documentation</label>\n\n      <input id=\"tab3\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab3\">Examples</label>\n\n      <input id=\"tab4\" type=\"radio\" name=\"tabs\" />\n      <label htmlFor=\"tab4\">Roadmap</label>\n\n      <div className=\"content\" id=\"content1\">\n        <h2>Installation Notes</h2>\n      </div>\n      <div className=\"content\" id=\"content2\">\n        <h2>Documentation</h2>\n      </div>\n      <div className=\"content\" id=\"content3\">\n        <Examples />\n\n      </div>\n      <div className=\"content\" id=\"content4\">\n        <h2>Roadmap</h2>\n        <Types />\n      </div>\n    </div>\n\n  </div>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/Doughnut.4dd6c995.md\";","module.exports = __webpack_public_path__ + \"static/media/LineBar.a0017100.md\";"],"sourceRoot":""}